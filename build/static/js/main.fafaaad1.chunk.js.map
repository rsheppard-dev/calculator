{"version":3,"sources":["components/Button.js","components/Display.js","App.js","index.js"],"names":["Button","btn","input","setInput","currentNumber","setCurrentNumber","setOperator","previousNumber","setPreviousNumber","operator","useState","equalPressed","setEqualPressed","className","class","calculateSum","newInput","undefined","endsWith","substring","length","inputArray","split","numbers","operators","i","isNaN","match","push","parseFloat","reduce","total","value","index","safeEval","handleClick","type","regex","RegExp","Math","sign","Number","replace","abs","reverseNumber","num","toString","op","appendOperator","includes","id","onClick","label","Display","ReactHTMLParser","App","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fafaaad1.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nconst Button = ({ btn, input, setInput, currentNumber, setCurrentNumber, previousNumber, setPreviousNumber, operator, setOperator }) => {\r\n\r\n    const [equalPressed, setEqualPressed] = useState(false);\r\n\r\n    const className = `btn ${btn.class}`;\r\n\r\n    // my safe version of the eval() function\r\n    const safeEval = (newInput) => {\r\n        // return if input is empty\r\n        if (!input) {\r\n            return currentNumber;\r\n        }\r\n\r\n        const inputArray = newInput ? newInput.split(' ') : input.split(' ');\r\n        const numbers = [];\r\n        const operators = [];\r\n\r\n        // capture numbers and operators from input state\r\n        for (let i = 0; i < inputArray.length; i++) {\r\n            if (!isNaN(inputArray[i])) {\r\n                numbers.push(parseFloat(inputArray[i]));\r\n            } else if (inputArray[i].match(/^(\\+|-|x|รท)$/)) {\r\n                operators.push(inputArray[i]);\r\n            }\r\n        }\r\n\r\n        // calculate sum from current inputs\r\n        const reducer = (total, value, index) => {\r\n            switch (operators[index - 1]) {\r\n                case 'รท':\r\n                    return total / value;\r\n                case 'x':\r\n                    return total * value;\r\n                case '-':\r\n                    return total - value;\r\n                case '+':\r\n                    return total + value;\r\n                default:\r\n                    return total;\r\n            }\r\n        }\r\n\r\n        return numbers.reduce(reducer);\r\n    }\r\n\r\n    // reset state to intial settings\r\n    const resetState = () => {\r\n        setInput('');\r\n        setCurrentNumber('0');\r\n        setOperator(undefined);\r\n        setEqualPressed(false);\r\n    }\r\n\r\n    // converts positive numbers to negative and vice-versa\r\n    const reverseNumber = () => {\r\n        const regex = new RegExp(currentNumber + '$');\r\n\r\n        if (Math.sign(Number(currentNumber)) < 0) {\r\n            setInput(input.replace(regex, Math.abs(currentNumber)));\r\n            setCurrentNumber(Math.abs(currentNumber));\r\n        } else if (Math.sign(Number(currentNumber)) > 0) {\r\n            setInput(input.replace(regex, -Math.abs(currentNumber)));\r\n            setCurrentNumber(-Math.abs(currentNumber));\r\n        }\r\n    }\r\n\r\n    // add new numbers to state\r\n    const appendNumber = num => {\r\n        if (equalPressed) {\r\n            setCurrentNumber(Number(num).toString());\r\n            setInput(num);\r\n            setEqualPressed(false);\r\n        } else {\r\n            setCurrentNumber(Number(`${currentNumber}${num}`).toString());\r\n            setInput(`${input}${num}`); \r\n        }\r\n    }\r\n\r\n    // add operator to formula\r\n    const appendOperator = op => {\r\n        let newInput = undefined;\r\n\r\n        if (input.endsWith('</span> ')) { // change operator if previously set\r\n            newInput = input.substring(0, input.length - 35);\r\n            setInput(`${newInput} <span class=\"operator\"> ${op} </span> `);\r\n        } else if (currentNumber === '0') { // check a number has been set first\r\n            return;\r\n        } else {\r\n            setInput(`${input} <span class=\"operator\"> ${op} </span> `);\r\n        }\r\n        setCurrentNumber('0');\r\n        setOperator(op);\r\n    }\r\n\r\n    // add decimal point to current number if not present\r\n    const addDecimal = () => {\r\n        if (!currentNumber.includes('.')) {\r\n            currentNumber === '0' ? setInput(`${input}0.`) :\r\n                setInput(`${input}.`);\r\n\r\n            setCurrentNumber(`${currentNumber}.`);\r\n        }\r\n    }\r\n\r\n    // calculate current sum in the input state\r\n    const calculateSum = () => {\r\n        setEqualPressed(true);\r\n        let newInput = undefined;\r\n        \r\n        // remove operator if input ends in one\r\n        if (input.endsWith('</span> ')) {\r\n            newInput = input.substring(0, input.length - 35);\r\n            setInput(newInput);\r\n        }\r\n        setCurrentNumber(safeEval(newInput));\r\n    }\r\n\r\n    // action response to button clicks\r\n    const handleClick = (value, type) => {\r\n        switch (type) {\r\n            case 'reset':\r\n                resetState();\r\n                break;\r\n            case 'negative':\r\n                reverseNumber();\r\n                break;\r\n            case 'zero': // do not allow number to start with zero\r\n                if (currentNumber === '0') {\r\n                    break;\r\n                }\r\n            // eslint-disable-next-line\r\n            case 'number':\r\n                appendNumber(value);\r\n                break;\r\n            case 'operator':\r\n                appendOperator(value);\r\n                break;\r\n            case 'decimal':\r\n                addDecimal();\r\n                break;\r\n            case 'equals':\r\n                calculateSum();\r\n                break;\r\n            default:\r\n                return currentNumber;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button className={className} id={btn.id} onClick={() => handleClick(btn.label, btn.class)}>\r\n            {btn.label}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import ReactHTMLParser from 'react-html-parser';\r\n\r\nconst Display = ({input, currentNumber, operator}) => {\r\n    return (\r\n        <div className=\"display\">\r\n            <div className=\"sum\" >{ReactHTMLParser(input)}</div>\r\n            <div className=\"total\">{operator && currentNumber === '0' ? operator : currentNumber}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;","import { useState } from 'react';\nimport Button from \"./components/Button\";\nimport Display from \"./components/Display\";\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [currentNumber, setCurrentNumber] = useState('0');\n  const [operator, setOperator] = useState(undefined);\n\n  const buttons = [\n    { label: 'AC', id: 'clear', class: 'reset'},\n    { label: 'ยฑ', id: 'negative', class: 'negative'},\n    { label: 'x', id: 'multiply', class: 'operator'},\n    { label: 7, id: 'seven', class: 'number'},\n    { label: 8, id: 'eight', class: 'number'},\n    { label: 9, id: 'nine', class: 'number'},\n    { label: 'รท', id: 'divide', class: 'operator'},\n    { label: 4, id: 'four', class: 'number'},\n    { label: 5, id: 'five', class: 'number'},\n    { label: 6, id: 'six', class: 'number'},\n    { label: '-', id: 'subtract', class: 'operator'},\n    { label: 1, id: 'one', class: 'number'},\n    { label: 2, id: 'two', class: 'number'},\n    { label: 3, id: 'three', class: 'number'},\n    { label: '+', id: 'add', class: 'operator'},\n    { label: 0, id: 'zero', class: 'zero'},\n    { label: '.', id: 'decimal', class: 'decimal'},\n    { label: '=', id: 'equals', class: 'equals'}\n  ];\n\n  return (\n    <div className=\"App\">\n     <div className=\"calculator\">\n       <Display input={input} currentNumber={currentNumber} operator={operator} />\n       <div className=\"keyboard\">\n        <div className=\"button-container\">\n          {buttons.map((btn, index) => {\n            return (\n              <Button key={index} btn={btn} input={input} setInput={setInput} currentNumber={currentNumber} setCurrentNumber={setCurrentNumber} operator={operator} setOperator={setOperator} />\n            )\n          })}\n        </div>\n        <div className=\"speaker\"></div>       \n       </div>\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}